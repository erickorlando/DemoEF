//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatosModelFirst
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DemoEFEntities : DbContext
    {
        public DemoEFEntities()
            : base("name=DemoEFEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Companies> Empresas { get; set; }
        public virtual DbSet<Users> Usuarios { get; set; }
    
        public virtual ObjectResult<usp_ListarUsuariosByEmpresa_Result> usp_ListarUsuariosByEmpresa()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListarUsuariosByEmpresa_Result>("usp_ListarUsuariosByEmpresa");
        }
    
        public virtual int usp_Usuarios_delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Usuarios_delete", idParameter);
        }
    
        public virtual int usp_Usuarios_insert(Nullable<int> idEmpresa, string nombres, string apellidos, string nombreUsuario, string clave)
        {
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Usuarios_insert", idEmpresaParameter, nombresParameter, apellidosParameter, nombreUsuarioParameter, claveParameter);
        }
    
        public virtual ObjectResult<usp_Usuarios_select_Result> usp_Usuarios_select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Usuarios_select_Result>("usp_Usuarios_select");
        }
    
        public virtual int usp_Usuarios_update(Nullable<int> id, Nullable<int> idEmpresa, string nombres, string apellidos, string nombreUsuario, string clave)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("IdEmpresa", idEmpresa) :
                new ObjectParameter("IdEmpresa", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Usuarios_update", idParameter, idEmpresaParameter, nombresParameter, apellidosParameter, nombreUsuarioParameter, claveParameter);
        }
    }
}
